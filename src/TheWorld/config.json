{
  "AppSettings": {
    "SiteEmailAddress": "rayzorgod@hotmail.com"
  },
  "Data": {
    "WorldContextConnection": "Server=(localdb)\\v11.0;Database=TheWorldDB;Trusted_Connection=true;MultipleActiveResultSets=true;"
  }
}

// NOTES ON Dependencies FILES:

//Project.json contains information about our asp.net application including all of the SERVER SIDE dependencies. Equivalent to using nuget but typing it.

//Bower.json contains all the CLIENT Side dependencies. All goes into the wwwroot -> lib folder.   If you look at the Dependencies -> Bower folder it tells you what you actually used & registered through the Bower.json service.

//Package.json - (NPM) node package manager - you can use the package.json (NPM interface) to get the different Node based tool dependencies into your environment,like GULP and GRUNT which are based on Node (strictly for Node related tools/librabries).
//                Gulp is a task runner - so you can define in js file things you want to happen on a periodic basis. Gulp-uglifier makes smaller version of your js file, takes out whitspace, variable name smaller (basically a compressor) so sending the file is smaller over the internet.


//The wwwwroot special folder , this is the root of the website when you deploy it. This is so the Client side assets are segregated into a single place.


//The startup.cs -> in previous version of asp.net , the global.asax was used to fire events on different startup times. In asp.net 5 startup.cs is place for all this to happen now.


//In startup.cs -> there is an Startup event and IConfiguration object and it contains all the information for the environment and 'config.json' . Config.json is to replace web.config.
//Once  IConfiguration is setup, next there is an ConfigureServices event and it contains IServiceCollection services and you can do Microsofot own in built Dependency injection to all your I Interefaces.
//Once IServiceCollection is setup, next there is a Configure event and it contains IApplicationBuilder object and it allows us to OPT-IN to the asp.net services.

//Test change


//Addit1234onalRaddicalllServer changes.


//More changes.
